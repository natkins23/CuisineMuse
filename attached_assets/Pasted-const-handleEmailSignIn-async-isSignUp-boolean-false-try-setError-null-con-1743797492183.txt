const handleEmailSignIn = async (isSignUp: boolean = false) => {
  try {
    setError(null);
    const isValid = await form.trigger();
    if (!isValid) return;

    const { email: rawEmail, password } = form.getValues();
    const email = rawEmail.trim().toLowerCase();

    if (isSignUp) {
      const methods = await fetchSignInMethodsForEmail(auth, email);

      if (methods.length > 0) {
        if (methods.includes("google.com")) {
          setError("This email is already used with Google Sign-In. Please use that option.");
        } else {
          setError("An account already exists with this email. Please sign in instead.");
        }
        return;
      }
    }

    setIsSigningIn(true);
    const authFunction = isSignUp ? signUpWithEmail : signInWithEmail;
    const userCredential = await authFunction(email, password);

    if (isSignUp && userCredential?.user?.email) {
      await fetch('/api/email/test', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: userCredential.user.email,
          name: userCredential.user.email.split('@')[0],
        }),
      });
    }

    onOpenChange(false);
  } catch (error: any) {
    console.error("Email auth error:", error.code, error.message);
    if (error.code === 'auth/wrong-password') {
      setError("Incorrect password. Please try again.");
    } else if (error.code === 'auth/user-not-found') {
      setError("No account found with this email. Please sign up first.");
    } else if (error.code === 'auth/invalid-credential') {
      setError("Invalid login credentials. Please check your email and password.");
    } else if (error.code === 'auth/too-many-requests') {
      setError("Too many attempts. Please try again later.");
    } else if (error.code === 'auth/invalid-email') {
      setError("Invalid email format. Please enter a valid email address.");
    } else if (error.code === 'auth/weak-password' && isSignUp) {
      setError("Password is too weak. Please use at least 6 characters.");
    } else if (error.code === 'auth/email-already-in-use' && isSignUp) {
      setError("Email is already in use. Please sign in instead.");
    } else {
      setError(error.message || "An unexpected error occurred.");
    }
  } finally {
    setIsSigningIn(false);
  }
};