import nodemailer from 'nodemailer';
import { GeneratedRecipe } from './gemini';

interface EmailConfig {
  host: string;
  port: number;
  secure: boolean;
  auth: {
    user: string;
    pass: string;
  };
}

interface RecipeEmailData {
  recipe: Partial<GeneratedRecipe>;
  recipientEmail: string;
}

/**
 * Create a transporter for sending emails
 */
function createTransporter() {
  // Check for environment variables
  const emailHost = process.env.EMAIL_HOST;
  const emailPort = process.env.EMAIL_PORT ? parseInt(process.env.EMAIL_PORT) : 587;
  const emailUser = process.env.EMAIL_USER;
  const emailPass = process.env.EMAIL_PASS;
  
  if (!emailHost || !emailUser || !emailPass) {
    console.error('Missing email configuration. Please set EMAIL_HOST, EMAIL_USER, and EMAIL_PASS environment variables.');
    return null;
  }
  
  const config: EmailConfig = {
    host: emailHost,
    port: emailPort,
    secure: emailPort === 465, // true for 465, false for other ports
    auth: {
      user: emailUser,
      pass: emailPass,
    },
  };
  
  return nodemailer.createTransport(config);
}

/**
 * Send a recipe via email
 */
export async function sendRecipeEmail({ recipe, recipientEmail }: RecipeEmailData): Promise<boolean> {
  const transporter = createTransporter();
  
  if (!transporter) {
    console.error('Email transporter could not be created.');
    return false;
  }
  
  if (!recipe || !recipe.title) {
    console.error('Cannot send email: Recipe data is incomplete');
    return false;
  }
  
  try {
    // Create HTML content for the email
    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h1 style="color: #4a5568;">${recipe.title}</h1>
        
        ${recipe.description ? `<p style="color: #4a5568; margin-bottom: 20px;">${recipe.description}</p>` : ''}
        
        <div style="margin-bottom: 20px;">
          <h2 style="color: #2d3748;">Ingredients</h2>
          <div style="white-space: pre-line; color: #4a5568;">
            ${recipe.ingredients ? recipe.ingredients : 'Ingredients not available'}
          </div>
        </div>
        
        <div style="margin-bottom: 20px;">
          <h2 style="color: #2d3748;">Instructions</h2>
          <div style="white-space: pre-line; color: #4a5568;">
            ${recipe.instructions ? recipe.instructions : 'Instructions not available'}
          </div>
        </div>
        
        <div style="margin-top: 30px; font-size: 14px; color: #718096;">
          <p>Meal Type: ${recipe.mealType || 'N/A'}</p>
          <p>Prep Time: ${recipe.prepTime ? `${recipe.prepTime} minutes` : 'N/A'}</p>
          <p>Servings: ${recipe.servings || 'N/A'}</p>
        </div>
        
        <p style="margin-top: 30px; font-size: 12px; color: #a0aec0;">
          This recipe was generated by Chef Pierre's AI Recipe Generator. Enjoy your cooking!
        </p>
      </div>
    `;
    
    // Send email
    const info = await transporter.sendMail({
      from: `"Chef Pierre" <${process.env.EMAIL_USER}>`,
      to: recipientEmail,
      subject: `Recipe: ${recipe.title}`,
      html: htmlContent,
    });
    
    console.log('Email sent successfully:', info.messageId);
    return true;
  } catch (error) {
    console.error('Error sending email:', error);
    return false;
  }
}

/**
 * Send a test email to verify configuration
 */
export async function sendTestEmail(recipientEmail: string): Promise<boolean> {
  const transporter = createTransporter();
  
  if (!transporter) {
    console.error('Email transporter could not be created.');
    return false;
  }
  
  try {
    const info = await transporter.sendMail({
      from: `"Chef Pierre" <${process.env.EMAIL_USER}>`,
      to: recipientEmail,
      subject: 'Test Email from Chef Pierre',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h1 style="color: #4a5568;">Your email is working!</h1>
          <p style="color: #4a5568;">This is a test email from Chef Pierre's Recipe Generator.</p>
          <p style="color: #4a5568;">Now you can receive delicious recipes directly in your inbox!</p>
        </div>
      `,
    });
    
    console.log('Test email sent successfully:', info.messageId);
    return true;
  } catch (error) {
    console.error('Error sending test email:', error);
    return false;
  }
}